{"ast":null,"code":"import { User } from './user';\nimport { UserService } from './user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nconst _c0 = [\"readOnlyTemplate\"];\nconst _c1 = [\"editTemplate\"];\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(serv) {\n      this.serv = serv;\n      this.p = 1;\n      this.editedUser = null;\n      this.isNewRecord = false;\n      this.statusMessage = \"\";\n      this.users = new Array();\n    }\n\n    ngOnInit() {\n      this.loadUsers();\n    } //загрузка пользователей\n\n\n    loadUsers() {\n      this.serv.getUsers().subscribe(data => {\n        this.users = data;\n      });\n    } // добавление пользователя\n\n\n    addUser() {\n      this.editedUser = new User(\"\", \"\", 0, \"\", \"\", \"\", \"\", \"\", \"\");\n      this.users.unshift(this.editedUser); // this.users.push(this.editedUser);\n\n      this.isNewRecord = true;\n    } // редактирование пользователя\n\n\n    editUser(user) {\n      this.editedUser = new User(user.email, user.username, user.year, user._id, user.password, user.country, user.city, user.jobs, user.position);\n    } // загружаем один из двух шаблонов\n\n\n    loadTemplate(user) {\n      if (this.editedUser && this.editedUser._id === user._id) {\n        return this.editTemplate;\n      } else {\n        return this.readOnlyTemplate;\n      }\n    } // сохраняем пользователя\n\n\n    saveUser() {\n      if (this.isNewRecord) {\n        // добавляем пользователя\n        this.serv.createUser(this.editedUser).subscribe(data => {\n          this.statusMessage = 'Данные успешно добавлены', this.loadUsers();\n        });\n        this.isNewRecord = false;\n        this.editedUser = null;\n      } else {\n        // изменяем пользователя\n        this.serv.updateUser(this.editedUser).subscribe(data => {\n          this.statusMessage = 'Данные успешно обновлены', this.loadUsers();\n        });\n        this.editedUser = null;\n      }\n    } // отмена редактирования\n\n\n    cancel() {\n      // если отмена при добавлении, удаляем последнюю запись\n      if (this.isNewRecord) {\n        // this.users.pop();\n        this.users.shift();\n        this.isNewRecord = false;\n      }\n\n      this.editedUser = null;\n    } // удаление пользователя\n\n\n    deleteUser(user) {\n      this.serv.deleteUser(user._id).subscribe(data => {\n        this.statusMessage = 'Данные успешно удалены', this.loadUsers();\n      });\n    }\n\n    selectTodo(event) {\n      console.log(event);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.UserService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"my-app\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.readOnlyTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editTemplate = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([UserService])],\n    decls: 0,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}